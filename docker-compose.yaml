version: '3'

services:
  postgres:
    build:
      context: .
      dockerfile: Dockerfile_Postgres
    container_name: postgres
    ports:
      - "5432:5432"
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "de_user"]
      interval: 5s
      retries: 5
    volumes:
      - ./postgres-scripts/sql:/docker-entrypoint-initdb.d
    networks:
      - de-challenge-network
    
  minio:
    image: docker.io/bitnami/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - .env
    volumes:
      - minio_data:/data
    depends_on:
      - postgres
    networks:
      - de-challenge-network

  airflow-webserver:
    build:
        context: .
        dockerfile: Dockerfile_Airflow
    container_name: airflow-webserver
    command: webserver
    entrypoint: ./scripts/entrypoint.sh
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 30s
      retries: 5
    env_file:
      - .env
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/scripts:/opt/airflow/scripts
      - airflow-logs-volume:/opt/airflow/logs
      - airflow-plugins-volume:/opt/airflow/plugins
    ports:
      - "8080:8080"
    networks:
      - de-challenge-network

  airflow-scheduler:
    build:
        context: .
        dockerfile: Dockerfile_Airflow
    container_name: airflow-scheduler
    command: scheduler
    depends_on:
      postgres:
        condition: service_healthy
      airflow-webserver:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/scripts:/opt/airflow/scripts
      - airflow-logs-volume:/opt/airflow/logs
      - airflow-plugins-volume:/opt/airflow/plugins
    ports:
      - "8793:8793"
    networks:
      - de-challenge-network

  zookeeper:
    image: debezium/zookeeper:1.6
    container_name: zookeeper
    ports:
      - 2181:2181
    networks:
      - de-challenge-network

  kafka:
    image: debezium/kafka:1.6
    container_name: kafka
    ports:
      - "9092:9092"
    links:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: ${HOST_IP}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    hostname: kafka
    networks:
      - de-challenge-network

  kafka-postgres-connector:
    image: debezium/connect:1.6
    container_name: debezium
    ports:
      - 9090:8083
    links:
      - kafka
    depends_on:
      - kafka
      - postgres
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=pg
      - CONFIG_STORAGE_TOPIC=pg_connect_configs
      - OFFSET_STORAGE_TOPIC=pg_connect_offsets
      - STATUS_STORAGE_TOPIC=pg_connect_statuses
    networks:
      - de-challenge-network

volumes:
  minio_data:
  airflow-logs-volume:
  airflow-plugins-volume:

networks:
  de-challenge-network:
    driver: bridge